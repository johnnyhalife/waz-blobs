= Windows Azure Blobs library -- simple gem for accessing WAZ's Storage Blobs REST API

Client library that will enable you to consume the Windows Azure Storage Service Blobs thru it's REST API. Most of this work is inspired
on S3 existing APIs although there's some changes  

== Getting started
	sudo gem install waz-blobs --source http://gemcutter.org

== Usage: Basics
These are the basics of interacting with the API, further on this document you will find specific documentation 
for each operation on the API.

	require 'waz-blobs'

	WAZ::Blobs::Base.establish_connection!(:account_name => your_account_name, :access_key => your_account_key)
																			
	# creates a container
	container = WAZ::Blobs::Container.create('my-container')

	# stores a blob with custom properties (metadata)
	blob = container.store('my_blob.txt',  'this is the content of my blob', 'text', {:x_ms_meta_Custom_Property => "custom_value" } )

	# return a specific blob from a container
	blob = container['my_blob.txt'] 

	# retrieves a blob value
	blob.value	

== Usage: Dealing with containers
These are the methods implemented from Microsoft's API description available on MSDN at http://msdn.microsoft.com/en-us/library/dd179361.aspx

	# list available containers
	WAZ::Blobs::Container.list

	# create a container
	WAZ::Blobs::Container.create('my-container')
	
	# get a specific container 
	my_container = WAZ::Blobs::Container.find('my-container')
	
	# get container properties (including default headers)
	my_container.metadata #=> hash containing beautified metadata (:x_ms_meta_name)
	
	# set container properties (should follow x-ms-meta to be persisted)
	my_container.put_properties(:x_ms_meta_MyProperty => "my value")
	
	# get a the value indicating whether the container is public or not
	my_container.public_access? #=> true or false based on x-ms-prop-publicaccess
	
	# set a value indicating whether the container is public or not
	my_container.public_access = false

	# delete container
	my_container.destroy!
	
	# store a blob on the given container
	my_container.store('my-blob', blob_content, 'application/xml')

	# retrieve a particular blob from a container
	my_container['my-blob']
	
	# retrieve a blob list from a container
	my_container.blobs #=> WAZ::Blobs::BlobObject collection

== Usage: Dealing with blobs
These are the implemented methods of the blob API up to now. The basics are implemented although BLOCKS management is not yet completed, I consider
that the API is pretty usable since it covers the basics

	# retrieve blob name, uri and content-type
	blob.name
	blob.url
	blob.content_type

	# retrieve blob value 
	blob.value #=> lazy loaded payload of the blob
	
	# retrieve blob metadata (+ properties)
	blob.metadata #=> hash containing beautified metadata (:x_ms_meta_name)
	
	# put blob metadata
	blob.put_properties(:x_ms_meta_MyProperty => "my value") 
	
	# update value
	blob.value = "my new value" #=> this will update the blob content on WAZ
	
=== Remarks
Since Windows Azure Blob Storage API doesn't support blobs on the <em>root container</em>, there's no support like S3 to put a blob <b>without a container relationship</b>, 
as WAZ support it. I'll add support for that scenario.

== Meta

Written by Johnny G. Halife (johnny.halife at me dot com)

contributed by: Ezequiel Morito (http://blogs.southworks.net/emorito) and Juan Pablo Garcia (http://blogs.southworks.net/jpgarcia)

Released under the MIT License: http://www.opensource.org/licenses/mit-license.php

http://github.com/johnnyhalife/waz-blobs
